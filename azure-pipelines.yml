trigger:
  - master
  - develop

name: $(BuildID)-$(Build.SourceBranchName)

pool:
  vmImage: 'ubuntu-latest'

variables:
  ${{ if notIn(variables['Build.SourceBranchName'], 'master', 'develop') }}:
    buildImage: false
    deployService: false
    deployEnvironment: 'no'
    imageTags: 'no'
    serviceName: 'no'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    buildImage: true
    deployService: true
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    serviceName: itlab-develop_salary
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildImage: true
    deployService: true
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    serviceName: itlab_salary

stages:
- stage: build
  displayName: Build
  jobs:
  - job: buildApi
    steps:
      - task: Bash@3
        displayName: Build
        inputs:
          filePath: 'build.sh'
      - publish: deploy
        artifact: itlab-salary-build
- stage: packDocker
  displayName: pack Docker image
  condition: and(succeeded(), ${{variables.buildImage}})
  jobs:
  - job: packBuild
    steps:
      - download: current
        artifact: itlab-salary-build
      - task: Docker@2
        inputs:
          containerRegistry: 'rtuitlab connection by admin'
          repository: 'rtuitlab/salary'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/itlab-salary-build/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/itlab-salary-build'
          tags: ${{variables.imageTags}}
- stage: deploy
  displayName: Deploy
  condition: and(succeeded(), ${{variables.deployService}})
  jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-latest'
      environment: ${{variables.deployEnvironment}}
      strategy:
        runOnce:
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/salary:$(Build.BuildId) ${{variables.serviceName}} --with-registry-auth'
                  readyTimeout: '20000'
# - stage: test

#   jobs:
#   - job: test

#     pool:
#       vmImage: ubuntu-latest

#     steps:
#     - checkout: self
#       clean: true
#       fetchDepth: 1
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         artifactName: 'itlab-salary-build'
#         targetPath: './tests/e2e/salary-api/itlab-salary-build'
#     - task: CmdLine@2
#       displayName: run testmace
#       inputs:
#         script: |
#           docker-compose --no-ansi up testmace
#         workingDirectory: './tests/e2e'

#     - task: CmdLine@2
#       displayName: show logs
#       inputs:
#         script: |
#           docker-compose logs test-salary-api
#         workingDirectory: './tests/e2e'

#     - task: CmdLine@2
#       displayName: remove all cintainers
#       inputs:
#         script: |
#           docker-compose --no-ansi rm -f -s
#         workingDirectory: './tests/e2e'
#     - task: CopyFiles@2
#       displayName: copy JUnit files to ArtifactStagingDirectory
#       inputs:
#         SourceFolder: tests/e2e/out
#         Contents: '**'
#         TargetFolder: '$(Build.ArtifactStagingDirectory)'
#         CleanTargetFolder: true
#     - task: PublishTestResults@2
#       inputs:
#         testResultsFormat: 'JUnit'
#         testResultsFiles: 'testmace*.xml'
#         searchFolder: '$(Build.ArtifactStagingDirectory)'
#         failTaskOnFailedTests: true